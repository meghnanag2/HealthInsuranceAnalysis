{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File: meps_ins_data_2018.csv | Missing Columns: ['CVVACCINE53', 'BOOSTERSHOT53', 'ENDRFY', 'ASTHAGED18']\n",
      "File: meps_ins_data_2019.csv | Missing Columns: ['CVVACCINE53', 'BOOSTERSHOT53', 'ENDRFY', 'TOTEXP18', 'TOTSLF18', 'FAMINC18', 'RXEXP18', 'OPTOTV18', 'DVTEXP18', 'DDNWRK18', 'ASTHAGED18', 'REGION18', 'ASTHAGED19']\n",
      "File: meps_ins_data_2020.csv | Missing Columns: ['CVVACCINE53', 'BOOSTERSHOT53', 'ENDRFY', 'TOTEXP18', 'TOTSLF18', 'FAMINC18', 'RXEXP18', 'OPTOTV18', 'DVTEXP18', 'DDNWRK18', 'ASTHAGED18', 'REGION18', 'TOTEXP19', 'TOTSLF19', 'FAMINC19', 'RXEXP19', 'OPTOTV19', 'DVTEXP19', 'DDNWRK19', 'ASTHAGED19', 'REGION19', 'ASTHAGED20']\n",
      "File: meps_ins_data_2021.csv | Missing Columns: ['ENDRFY', 'TOTEXP18', 'TOTSLF18', 'FAMINC18', 'RXEXP18', 'OPTOTV18', 'DVTEXP18', 'DDNWRK18', 'ASTHAGED18', 'REGION18', 'TOTEXP19', 'TOTSLF19', 'FAMINC19', 'RXEXP19', 'OPTOTV19', 'DVTEXP19', 'DDNWRK19', 'ASTHAGED19', 'REGION19', 'TOTEXP20', 'TOTSLF20', 'FAMINC20', 'RXEXP20', 'OPTOTV20', 'DVTEXP20', 'DDNWRK20', 'ASTHAGED20', 'REGION20', 'ASTHAGED21']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/f8/fx7w95s119nf2w_28yv4crlr0000gn/T/ipykernel_28607/2893947959.py:141: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df[\"CVVACCINE53\"].fillna(-1, inplace=True)\n",
      "/var/folders/f8/fx7w95s119nf2w_28yv4crlr0000gn/T/ipykernel_28607/2893947959.py:146: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df[\"BOOSTERSHOT53\"].fillna(-1, inplace=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File: meps_ins_data_2022.csv | Missing Columns: ['CVVACCINE53', 'BOOSTERSHOT53', 'ENDRFY', 'TOTEXP18', 'TOTSLF18', 'FAMINC18', 'RXEXP18', 'OPTOTV18', 'DVTEXP18', 'DDNWRK18', 'ASTHAGED18', 'REGION18', 'TOTEXP19', 'TOTSLF19', 'FAMINC19', 'RXEXP19', 'OPTOTV19', 'DVTEXP19', 'DDNWRK19', 'ASTHAGED19', 'REGION19', 'TOTEXP20', 'TOTSLF20', 'FAMINC20', 'RXEXP20', 'OPTOTV20', 'DVTEXP20', 'DDNWRK20', 'ASTHAGED20', 'REGION20', 'TOTEXP21', 'TOTSLF21', 'FAMINC21', 'RXEXP21', 'OPTOTV21', 'DVTEXP21', 'DDNWRK21', 'ASTHAGED21', 'REGION21', 'ASTHAGED22']\n",
      "Final combined data saved to combined_meps_data_new.csv\n",
      "Index(['Person_ID', 'Age', 'Gender', 'Employment_Status', 'Industry_Group',\n",
      "       'Employer_Offers_Health_Insurance', 'Occupation_Group',\n",
      "       'Never_Got_Flu_Shots', 'How_Often_Smoke_Cigarettes', 'General_Health',\n",
      "       'Race_Ethnicity', 'Highest_Education', 'High_Blood_Pressure_Diagnosis',\n",
      "       'Age_of_Diabetes_Diagnosis', 'Diabetes_Diagnosis',\n",
      "       'Age_of_High_Blood_Pressure_Diagnosis', 'Total_Expenditures',\n",
      "       'Total_Self_Payment', 'Family_Income',\n",
      "       'Total_Prescription_Expenditures', 'Dental_Care_Expenditures',\n",
      "       'Days_Missed_Work', 'Region', 'COVID_Vaccine', 'COVID_Booster_Shot',\n",
      "       'Year'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    " # Importing necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re  # For regex\n",
    "\n",
    "# Import mapping dictionaries\n",
    "from mapping import (\n",
    "    gender_mapping,\n",
    "    employment_status_mapping,\n",
    "    industry_group_mapping,\n",
    "    occupation_group_mapping,\n",
    "    never_got_flu_shots_mapping,\n",
    "    how_often_smoke_cigarettes_mapping,\n",
    "    general_health_mapping,\n",
    "    race_ethnicity_mapping,\n",
    "    highest_education_mapping,\n",
    "    high_blood_pressure_diagnosis_mapping,\n",
    "    diabetes_diagnosis_mapping,\n",
    "    outpatient_visits_mapping,\n",
    "    region_mapping,\n",
    "    covid_vaccine_mapping,\n",
    "    covid_booster_shot_mapping,\n",
    "    employer_offers_health_insurance_mapping\n",
    "    # Add other mappings as needed\n",
    ")\n",
    "\n",
    "# File paths for the datasets (update with actual paths)\n",
    "file_paths = [\n",
    "    \"meps_ins_data_2018.csv\",\n",
    "    \"meps_ins_data_2019.csv\",\n",
    "    \"meps_ins_data_2020.csv\",\n",
    "    \"meps_ins_data_2021.csv\",\n",
    "    \"meps_ins_data_2022.csv\"\n",
    "]\n",
    "\n",
    "# Placeholder for processed data\n",
    "data_list = []\n",
    "\n",
    "# Columns to combine across years (including new fields)\n",
    "combined_columns = [\n",
    "    \"TOTEXP\", \"TOTSLF\", \"FAMINC\", \"RXEXP\", \"OPTOTV\", \"DVTEXP\", \n",
    "    \"DDNWRK\", \"ASTHAGED\", \"REGION\"\n",
    "]\n",
    "\n",
    "# Selected columns to extract and process\n",
    "selected_columns = {\n",
    "    \"DUPERSID\": \"DUPERSID\",\n",
    "    \"AGELAST\": \"AGELAST\",  # Person's age\n",
    "    \"SEX\": \"SEX\",          # Gender\n",
    "    \"EMPST53H\": \"EMPST53H\",\n",
    "    \"INDCT53H\": \"INDCT53H\",\n",
    "    \"OFREMP53\": \"OFREMP53\",\n",
    "    \"OCCCAT53\": \"OCCCAT53\",\n",
    "    \"DSFLNV53\": \"DSFLNV53\",\n",
    "    \"CVVACCINE53\": \"CVVACCINE53\",\n",
    "    \"BOOSTERSHOT53\": \"BOOSTERSHOT53\",\n",
    "    \"OFTSMK53\": \"OFTSMK53\",\n",
    "    \"ADGENH42\": \"ADGENH42\",\n",
    "    \"RACETHX\": \"RACETHX\",\n",
    "    \"HIDEG\": \"HIDEG\",\n",
    "    \"HIBPDX\": \"HIBPDX\",\n",
    "    \"DIABAGED\": \"DIABAGED\",\n",
    "    \"DIABDX_M18\": \"DIABDX_M18\",\n",
    "    \"HIBPAGED\": \"HIBPAGED\",\n",
    "    \"ENDRFY\": \"ENDRFY\"  # Year of data\n",
    "}\n",
    "\n",
    "# Column renaming for final output\n",
    "rename_columns = {\n",
    "    \"DUPERSID\": \"Person_ID\",\n",
    "    \"AGELAST\": \"Age\",\n",
    "    \"SEX\": \"Gender\",\n",
    "    \"REGION\": \"Region\",\n",
    "    \"TOTEXP\": \"Total_Expenditures\",\n",
    "    \"TOTSLF\": \"Total_Self_Payment\",\n",
    "    \"FAMINC\": \"Family_Income\",\n",
    "    \"RXEXP\": \"Total_Prescription_Expenditures\",\n",
    "    \"OPTOTV\": \"Outpatient_Visits\",\n",
    "    \"DVTEXP\": \"Dental_Care_Expenditures\",\n",
    "    \"DDNWRK\": \"Days_Missed_Work\",\n",
    "    \"DIABAGED\": \"Age_of_Diabetes_Diagnosis\",\n",
    "    \"DIABDX_M18\": \"Diabetes_Diagnosis\",\n",
    "    \"HIBPAGED\": \"Age_of_High_Blood_Pressure_Diagnosis\",\n",
    "    \"HIBPDX\": \"High_Blood_Pressure_Diagnosis\",\n",
    "    \"ASTHAGED\": \"Age_of_Asthma_Diagnosis\",\n",
    "    \"EMPST53H\": \"Employment_Status\",\n",
    "    \"INDCT53H\": \"Industry_Group\",\n",
    "    \"OFREMP53\": \"Employer_Offers_Health_Insurance\",\n",
    "    \"OCCCAT53\": \"Occupation_Group\",\n",
    "    \"CVVACCINE53\": \"COVID_Vaccine\",\n",
    "    \"BOOSTERSHOT53\": \"COVID_Booster_Shot\",\n",
    "    \"OFTSMK53\": \"How_Often_Smoke_Cigarettes\",\n",
    "    \"ADGENH42\": \"General_Health\",\n",
    "    \"RACETHX\": \"Race_Ethnicity\",\n",
    "    \"HIDEG\": \"Highest_Education\",\n",
    "    \"DSFLNV53\": \"Never_Got_Flu_Shots\",\n",
    "    \"ENDRFY\": \"Year\"\n",
    "}\n",
    "\n",
    "# Values to drop rows for\n",
    "invalid_values = [-15]\n",
    "\n",
    "# Load and process each year's data\n",
    "for file in file_paths:\n",
    "    # Extract year from the filename (assuming year is part of the filename)\n",
    "    year = re.search(r'\\d{4}', file).group(0)\n",
    "    year_suffix = year[-2:]  # Get last two digits of the year (e.g., 21 for 2021)\n",
    "\n",
    "    # Load the data\n",
    "    df = pd.read_csv(file)\n",
    "\n",
    "    # Dynamically select columns for the current year\n",
    "    selected_columns_year = {f\"{col}{year_suffix}\": f\"{col}{year_suffix}\" for col in combined_columns}\n",
    "\n",
    "    # Add selected columns to the DataFrame\n",
    "    selected_columns.update(selected_columns_year)\n",
    "\n",
    "    # Check which columns are available in the dataset\n",
    "    matched_columns = {new_name: col_name for new_name, col_name in selected_columns.items() if col_name in df.columns}\n",
    "    missing_columns = [col_name for col_name in selected_columns.values() if col_name not in df.columns]\n",
    "\n",
    "    # Print debug information about missing columns\n",
    "    if missing_columns:\n",
    "        print(f\"File: {file} | Missing Columns: {missing_columns}\")\n",
    "\n",
    "    # Proceed only with matched columns\n",
    "    if matched_columns:\n",
    "        df = df.rename(columns=matched_columns)[list(matched_columns.keys())]\n",
    "    else:\n",
    "        continue  # Skip this file if no matched columns exist\n",
    "\n",
    "    # Combine year-specific columns into unified columns\n",
    "    for col in combined_columns:\n",
    "        year_specific_cols = [c for c in df.columns if re.match(f\"{col}(21|22|17|18|19|20)\", c)]\n",
    "        if year_specific_cols:\n",
    "            df[col] = df[year_specific_cols].bfill(axis=1).iloc[:, 0].astype(float)\n",
    "            df.drop(columns=year_specific_cols, inplace=True)\n",
    "\n",
    "    # Handle missing values for CVVACCINE53 and BOOSTERSHOT53\n",
    "    if \"CVVACCINE53\" in df.columns:\n",
    "        df[\"CVVACCINE53\"].fillna(-1, inplace=True)\n",
    "    else:\n",
    "        df[\"CVVACCINE53\"] = -1  # Add column with default value if missing\n",
    "\n",
    "    if \"BOOSTERSHOT53\" in df.columns:\n",
    "        df[\"BOOSTERSHOT53\"].fillna(-1, inplace=True)\n",
    "    else:\n",
    "        df[\"BOOSTERSHOT53\"] = -1  # Add column with default value if missing\n",
    "\n",
    "    # Add a \"Year\" column for identification\n",
    "    df[\"Year\"] = int(year)\n",
    "\n",
    "    # Rename columns according to the new naming convention\n",
    "    df.rename(columns=rename_columns, inplace=True)\n",
    "\n",
    "    \n",
    "    # Remove rows with invalid values for specific columns\n",
    "   # df = df[~df[\"Age_of_Diabetes_Diagnosis\"].isin(invalid_values)]\n",
    "   # df = df[~df[\"Age_of_High_Blood_Pressure_Diagnosis\"].isin(invalid_values)]\n",
    "    df = df[~df[\"Days_Missed_Work\"].isin(invalid_values)]\n",
    "\n",
    "    # Append the processed DataFrame to the list\n",
    "    data_list.append(df)\n",
    "\n",
    "# Combine all years of data into a single DataFrame\n",
    "all_data = pd.concat(data_list, ignore_index=True)\n",
    "all_data = all_data.drop('Outpatient_Visits', axis=1)\n",
    "# Save the final combined dataset\n",
    "output_file = \"combined_meps_data_new.csv\"\n",
    "all_data.to_csv(output_file, index=False)\n",
    "print(f\"Final combined data saved to {output_file}\")\n",
    "print(all_data.columns)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
